sources:
  dataplex-source:
    kind: "dataplex"
    project: ${DATAPLEX_PROJECT}

tools:
  search_entries:
    kind: dataplex-search-entries
    source: dataplex-source
    description: |
      Find all entries in Dataplex Catalog (e.g. tables, views, models) that match the provided search query.

      Steps to follow when this tool is called:
      1. Use "https://cloud.google.com/dataplex/docs/search-syntax" documentation that explains how to construct the search query. Rephrase the user query using the documentation.
      2. Pass the constructed query to the `search_entries` tool along with other parameters and retrieve the results.

      The output will look like this:

      {
        "results": [
          {
            object (SearchEntriesResult)
          }
        ],
        "totalSize": integer,
        "nextPageToken": string,
        "unreachable": [
          string
        ]
      }

      WHERE you have to keep note of results, totalSize and nextPageToken AND
      
      WHERE

      SearchEntriesResult has the following format:
      {
        "dataplexEntry": {
          object (Entry)
        }
      }

      WHERE

      you have to refer to description of dataplex-lookup-entry for details about the fields in the Entry object.

      Show the search entries results in a **nested ordered list** format to the user. Remember all the fields but respond with only the following fields:
      - Name: display_name of the entry
      - Project: project_id of the entry
      - Location: location of the entry

      Format the output in nested ordered list in the following way:
      
      1. customer_data
            project: my_project1
            location: us
      2. user_data
            project: test_project7
            location: us-central1

      These are invalid format of outputs for the user:
      Output:
      1. test345 (has extra fields)
            project: test_project2
            location: us
            type: table
      2. test123 (not nested)
      project: test_project3
      location: us-central1
      3. test (not nested)  project: test_project4 location: us-central1

      When the user chooses the entry, these are possible next queries from the user:
      1. Show me the details of the first entry. -> Use lookup_entry with the resource name of the first entry.
      2. What is the type of the third entry? -> Use lookup_entry with the resource name of the third entry and present the type to the user. 

      If there are multiple entries found, you should present the list of entries to the user and ask them to choose one.
      If there is only one entry found, you can ask the user if they want to see the details of that entry or if they want to search for another entry.
      If the response from the tool is empty then it means that there were no matching entries found. Notify the user about this and ask them to provide a more specific query.
    parameters:
      - name: query
        type: string
        description: "The query against which entries should be matched. The query syntax is defined in public documentation: https://cloud.google.com/dataplex/docs/search-syntax"
      - name: page_size
        type: integer
        description: "Maximum number of entries to return in the response"
        default: 10
      - name: page_token
        type: string
        description: "Token to retrieve the next page of results"
        default: ""
      - name: order_by
        type: string
        description: "Specifies the ordering of results. Supported values are: relevance, last_modified_timestamp, last_modified_timestamp asc"
        default: "relevance"

  lookup_entry:
    kind: dataplex-lookup-entry
    source: dataplex-source
    description: |
      Get details about a specific entry in Catalog.

      The output contains an instance of the Entry and will look like this:

      {
        "name": string,
        "entryType": string,
        "createTime": string,
        "updateTime": string,
        "aspects": {
          string: {
            object (Aspect)
          },
          ...
        },
        "parentEntry": string,
        "fullyQualifiedName": string,
        "entrySource": {
          object (EntrySource)
        }
      }

      Whenever this tool is called, you have to remember all the fields but return only the following fields:
      - resource_name - resource name of the entry
      - display_name - human readable name of the entry
      - description - description of the entry
      - type - type of the entry (e.g. table, view, model)
      - project_id - project where the entry is stored
      - location - location where the entry is stored

      This is valid example of an Entry object:
      ```
      {
        "resource_name": "projects/test-project/locations/us/entryGroups/@bigquery/entries/bigquery.googleapis.com/projects/test-project/datasets/test-dataset/tables/test-table1",
        "display_name": "test-table1",
        "description": "This is a test table",
        "type": "table",
        "project_id": "test-project",
        "location": "us"
      }
      ```
      You should present the details to the user in a human-readable format like this:
      ```
      Display Name: test-table1
      Description: This is a test table
      Resource Name: projects/test-project/locations/us/entryGroups/@bigquery/entries/bigquery.googleapis.com/projects/test-project/datasets/test-dataset/tables/test-table1
      Type: table
      Project ID: test-project
      Location: us
      ```
      ```
      Display Name: user-instance2
      Description: This is a test instance
      Resource Name: projects/test-project/locations/us/entryGroups/@bigtableadmin/entries/bigtableadmin.googleapis.com/projects/my-project-123/instances/my-instance-abc
      Type: instance
      Project ID: test-project
      Location: us-central1
      ```
      ```
      Display Name: test-table32
      Description: This is a test table from an external 3P data source.
      Resource Name: projects/test-project/locations/us-central1/entryGroups/external-3p-entry-group/entries/test-table1
      Type: table
      Project ID: test-project
      Location: us
      ```
      If the response from the tool is empty then it means that there were no matching entries found. Notify the user that the entry was not found.

      Users can have follow up questions on any field of the Entry object. Suggest the user to ask some possible questions.
    parameters:
      - name: name
        type: string
        description: "The project to which the request should be attributed in the following form: projects/{project}/locations/{location}."
      - name: entry
        type: string
        description: "The resource name of the Entry: projects/{project}/locations/{location}/entryGroups/{entryGroup}/entries/{entry}."
      - name: aspect_types
        type: array
        items:
          name: aspect_types_array_item
          type: string
          description: "String array of aspect types to be returned. If not specified, all aspects will be returned. This is only applicable for CUSTOM view."
        description: "Limits the aspects returned to the provided aspect types. It only works for CUSTOM view."
      - name: view
        type: string
        description: |
          It is an enum type argument for controlling which parts of aspects are to be returned for an entry. Passed as string "enum" corresponds to the following values:
          - ENTRY_VIEW_UNSPECIFIED (0) : Unspecified EntryView. Defaults to FULL.
          - BASIC (1) : Returns entry only, without aspects.
          - FULL (2) : Returns all required aspects as well as the keys of all non-required aspects.
          - CUSTOM (3) : Returns aspects matching custom fields in GetEntryRequest/LookupEntryRequest. If the number of aspects exceeds 100, the first 100 will be returned.
          - ALL (4) : Returns all aspects. If the number of aspects exceeds 100, the first 100 will be returned.

          Sample prompts:
          - Show basic details about users table. view = "1"
          - Show full details about users table. view = "2"
        default: "2"

toolsets:
  dataplex-tools:
    - search_entries
    - lookup_entry
